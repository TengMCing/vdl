Naming:

Macro:
VDL_*

base/util:
vdl_type
vdl_FunctionName
vdl_FunctionName_Internal
vdl_FunctionName_Variadic
vdl_type_FunctionName
vdl_type_FunctionName_Internal
vdl_type_FunctionName_Variadic

gc:
vdl_gc_type
vdl_gc_FunctionName

Q: What should be in-place and what whould return a new vector? A: IFunction & Function

Q: How to handle exception in REPL? What is a safe exception and what is not?
How to clean up and restore the state of the program when handling an exception?

How to define a set of high-level APIs (language) that ensures every exception throw by the statement can be handled?

Exception logic:
    1. In an expect macro, when the check fail, VDL_GERROR will be set to an error code.
    2. An exception should be raised by jumping to the VDL_EXCEPTION label,
    which contains proper exception handling
    e.g. cleaning up for any resources owned by the current function,
    and returns a standard error value:
    3.
        (a) For void, return nothing;
        (b) For integer type, return the maximum value of the type.
        (c) For floating point type, return NAN.
        (d) For pointer type, return NULL.
        (e) For structure type, return (struct){0}
    4. When receiving a value from a function which could possibly raise an exception,
    the VDL_GERROR should be checked before using the value.
    5. This is checked by vdl_Caller or vdl_CallerNoReturn.
    They should use the above logic to decide whether to jump to the VDL_EXCEPTION label.
    6. In any of the exception handler, the program can be terminated by calling vdl_Abort.

The main idea is every function could be treated as a try block with compulsory exception handler.